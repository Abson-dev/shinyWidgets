% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/useTemplate.R
\name{useTemplate}
\alias{useTemplate}
\title{Use HTML templates in 'shiny'}
\usage{
useTemplate(lib = c("shinydashboard", "shinydashboardPlus", "bs4Dash"))
}
\arguments{
\item{lib}{Choose a flavor among \code{c("shinydashboard", "shinydashboardPlus", "bs4Dash")}.}
}
\description{
Allow to use functions from 'shinydashboard', 'shinydashboardPlus', 'bs4Dash' into a classic 'shiny' app,
without the need to use sidebars, navbars or any sofisticated layout. The idea is
to be as simple as possible.
}
\examples{
\dontrun{

# shinydashboard

if (interactive()) {

library(shiny)
library(shinydashboard)
library(shinyWidgets)

# example taken from ?box

ui <- fluidPage(
  h1("Import shinydashboard elements inside shiny!", align = "center"),
  h5("Don't need any sidebar, navbar, ...", align = "center"),
  h5("Only focus on basic elements for a pure interface", align = "center"),

  # use this in non shinydashboard app
  setBackgroundColor(color = "ghostwhite"),
  useTemplate(lib = "shinydashboard"),
  # -----------------

  # infoBoxes
  fluidRow(
    infoBox(
      "Orders", uiOutput("orderNum2"), "Subtitle", icon = icon("credit-card")
    ),
    infoBox(
      "Approval Rating", "60\%", icon = icon("line-chart"), color = "green",
      fill = TRUE
    ),
    infoBox(
      "Progress", uiOutput("progress2"), icon = icon("users"), color = "purple"
    )
  ),

  # valueBoxes
  fluidRow(
    valueBox(
      uiOutput("orderNum"), "New Orders", icon = icon("credit-card"),
      href = "http://google.com"
    ),
    valueBox(
      tagList("60", tags$sup(style="font-size: 20px", "\%")),
      "Approval Rating", icon = icon("line-chart"), color = "green"
    ),
    valueBox(
      htmlOutput("progress"), "Progress", icon = icon("users"), color = "purple"
    )
  ),

  # Boxes
  fluidRow(
    box(status = "primary",
        sliderInput("orders", "Orders", min = 1, max = 2000, value = 650),
        selectInput("progress", "Progress",
                    choices = c("0\%" = 0, "20\%" = 20, "40\%" = 40, "60\%" = 60, "80\%" = 80,
                                "100\%" = 100)
        )
    ),
    box(title = "Histogram box title",
        status = "warning", solidHeader = TRUE, collapsible = TRUE,
        plotOutput("plot", height = 250)
    )
  )
)

server <- function(input, output, session) {

  output$orderNum <- renderText({
    prettyNum(input$orders, big.mark=",")
  })

  output$orderNum2 <- renderText({
    prettyNum(input$orders, big.mark=",")
  })

  output$progress <- renderUI({
    tagList(input$progress, tags$sup(style="font-size: 20px", "\%"))
  })

  output$progress2 <- renderUI({
    paste0(input$progress, "\%")
  })


  output$plot <- renderPlot({
    hist(rnorm(input$orders))
  })

}

shinyApp(ui, server)

}

# shinydashboardPlus
#' if (interactive()) {

library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyWidgets)


# example taken from ?box

ui <- fluidPage(
  h1("Import shinydashboardPlus elements inside shiny!", align = "center"),
  h5("Don't need any sidebar, navbar, ...", align = "center"),
  h5("Only focus on basic elements for a pure interface", align = "center"),

  # use this in non shinydashboardPlus app
  useTemplate(lib = "shinydashboardPlus"),
  setBackgroundColor(color = "ghostwhite"),

  # boxPlus
  fluidRow(
   boxPlus(
     title = "Closable Box with dropdown",
     closable = TRUE,
     status = "warning",
     solidHeader = FALSE,
     collapsible = TRUE,
     enable_dropdown = TRUE,
     dropdown_icon = "wrench",
     dropdown_menu = dropdownItemList(
       dropdownItem(url = "http://www.google.com", name = "Link to google"),
       dropdownItem(url = "#", name = "item 2"),
       dropdownDivider(),
       dropdownItem(url = "#", name = "item 3")
     ),
     p("Box Content")
   ),
   boxPlus(
     title = "Closable box, with label",
     closable = TRUE,
     enable_label = TRUE,
     label_text = 1,
     label_status = "danger",
     status = "warning",
     solidHeader = FALSE,
     collapsible = TRUE,
     p("Box Content")
   )
  ),

  br(),

  # gradientBoxes
  fluidRow(
    gradientBox(
     title = "My gradient Box",
     icon = "fa fa-th",
     gradientColor = "teal",
     boxToolSize = "sm",
     footer = column(
       width = 12,
       align = "center",
       sliderInput(
         "obs",
         "Number of observations:",
         min = 0, max = 1000, value = 500
       )
     ),
     plotOutput("distPlot")
    ),
    gradientBox(
     title = "My gradient Box",
     icon = "fa fa-heart",
     gradientColor = "maroon",
     boxToolSize = "xs",
     closable = TRUE,
     footer = "The footer goes here. You can include anything",
     "This is a gradient box"
    )
  ),

  br(),

  # extra elements
  fluidRow(
  column(
   width = 6,
   timelineBlock(
     reversed = FALSE,
     timelineEnd(color = "danger"),
     timelineLabel(2018, color = "teal"),
     timelineItem(
       title = "Item 1",
       icon = "gears",
       color = "olive",
       time = "now",
       footer = "Here is the footer",
       "This is the body"
     ),
     timelineItem(
       title = "Item 2",
       border = FALSE
     ),
     timelineLabel(2015, color = "orange"),
     timelineItem(
       title = "Item 3",
       icon = "paint-brush",
       color = "maroon",
       timelineItemMedia(src = "http://placehold.it/150x100"),
       timelineItemMedia(src = "http://placehold.it/150x100")
     ),
     timelineStart(color = "gray")
    )
   ),
  column(
   width = 6,
   box(
     title = "Box with boxPad containing inputs",
     status = "warning",
     width = 12,
     fluidRow(
       column(
         width = 6,
         boxPad(
           color = "gray",
           sliderInput(
             "obs2",
             "Number of observations:",
             min = 0, max = 1000, value = 500
           ),
           checkboxGroupInput(
             "variable",
             "Variables to show:",
             c(
               "Cylinders" = "cyl",
               "Transmission" = "am",
               "Gears" = "gear"
             )
           ),

           knobInput(
             inputId = "myKnob",
             skin = "tron",
             readOnly = TRUE,
             label = "Display previous:",
             value = 50,
             min = -100,
             displayPrevious = TRUE,
             fgColor = "#428BCA",
             inputColor = "#428BCA"
           )
         )
       ),
       column(
         width = 6,
         plotOutput("distPlot2", height = "200px"),
         tableOutput("data")
       )
     )
    )
   )
  )
)

server <- function(input, output, session) {

  output$distPlot <- renderPlot({
   hist(rnorm(input$obs))
  })

  output$distPlot2 <- renderPlot({
    hist(rnorm(input$obs2))
  })

  output$data <- renderTable({
    head(mtcars[, c("mpg", input$variable), drop = FALSE])
  }, rownames = TRUE)

}

shinyApp(ui, server)

}

# bs4Dash
#' if (interactive()) {

library(shiny)
library(bs4Dash)
library(shinyWidgets)

# example taken from ?box

ui <- fluidPage(
  h1("Import bs4Dash elements inside shiny!", align = "center"),
  h5("Don't need any sidebar, navbar, ...", align = "center"),
  h5("Only focus on basic elements for a pure interface", align = "center"),

  # use this in non dashboard app
  setBackgroundColor(color = "ghostwhite"),
  useTemplate(lib = "bs4Dash"),
  # -----------------

  # infoBoxes
  fluidRow(
    bs4InfoBox(
      title = "Messages",
      value = 1410,
      icon = "envelope"
      ),
      bs4InfoBox(
        title = "Bookmarks",
        status = "info",
        value = 240,
        icon = "bookmark"
      ),
      bs4InfoBox(
        title = "Comments",
        gradientColor = "danger",
        value = 41410,
        icon = "comments"
      )
  ),

  # valueBoxes
  fluidRow(
    bs4ValueBox(
      value = uiOutput("orderNum"),
      subtitle = "New Orders",
      icon = "credit-card",
      href = "http://google.com"
    ),
    bs4ValueBox(
      value = "60\%",
      subtitle = "Approval Rating",
      icon = "line-chart",
      status = "success"
    ),
    bs4ValueBox(
      value = htmlOutput("progress"),
      subtitle = "Progress",
      icon = "users",
      status = "danger"
    )
  ),

  # Boxes
  fluidRow(
    bs4Card(
     status = "primary",
     sliderInput("orders", "Orders", min = 1, max = 2000, value = 650),
     selectInput(
      "progress",
      "Progress",
       choices = c(
         "0\%" = 0, "20\%" = 20, "40\%" = 40,
          "60\%" = 60, "80\%" = 80, "100\%" = 100
       )
      )
    ),
   bs4Card(
    title = "Histogram box title",
    status = "warning",
    solidHeader = TRUE,
    collapsible = TRUE,
    plotOutput("plot", height = 250)
    )
  )
)

server <- function(input, output, session) {

  output$orderNum <- renderText({
    prettyNum(input$orders, big.mark=",")
  })

  output$orderNum2 <- renderText({
    prettyNum(input$orders, big.mark=",")
  })

  output$progress <- renderUI({
    tagList(input$progress, tags$sup(style="font-size: 20px", "\%"))
  })

  output$progress2 <- renderUI({
    paste0(input$progress, "\%")
  })


  output$plot <- renderPlot({
    hist(rnorm(input$orders))
  })

}

shinyApp(ui, server)

}

}
}
